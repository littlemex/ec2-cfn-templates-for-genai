#!/bin/bash

# Amazon Q Developer Login Helper Script
# This script automatically detects Identity Center settings and generates the appropriate q login command

set -e

echo "üîç Amazon Q Developer Login Helper"
echo "=================================="

# Function to get AWS caller identity
get_caller_identity() {
    local result
    result=$(aws sts get-caller-identity --output json 2>/dev/null) || {
        echo "‚ùå Error: Unable to get AWS caller identity. Please ensure AWS CLI is configured." >&2
        exit 1
    }
    echo "$result"
}

# Function to get Identity Center instances
get_identity_center_instances() {
    local result
    result=$(aws sso-admin list-instances --output json 2>/dev/null) || {
        echo "‚ùå Error: Unable to list Identity Center instances. Please check permissions." >&2
        exit 1
    }
    echo "$result"
}

# Function to get Amazon Q Developer applications
get_amazon_q_applications() {
    local instance_arn="$1"
    local result
    result=$(aws sso-admin list-applications --instance-arn "$instance_arn" --output json 2>/dev/null) || {
        echo "‚ùå Error: Unable to list applications for Identity Center instance." >&2
        exit 1
    }
    echo "$result"
}

# Function to extract region from ARN
extract_region_from_arn() {
    local arn="$1"
    # SSO ARNs don't contain region, so we need to get it from AWS CLI config or default to us-east-1
    local region
    region=$(aws configure get region 2>/dev/null) || region="us-east-1"
    echo "$region"
}

# Function to extract identity store ID from instance ARN
extract_identity_store_id() {
    local instance_arn="$1"
    echo "$instance_arn" | sed 's/.*instance\///'
}

# Main execution
main() {
    echo
    
    # Get caller identity
    echo "üìã Getting current AWS identity..."
    caller_identity=$(get_caller_identity)
    if [ -z "$caller_identity" ]; then
        echo "‚ùå Failed to get caller identity"
        exit 1
    fi
    account_id=$(echo "$caller_identity" | jq -r '.Account' 2>/dev/null)
    if [ -z "$account_id" ] || [ "$account_id" = "null" ]; then
        echo "‚ùå Failed to parse account ID from caller identity"
        exit 1
    fi
    echo "‚úÖ Current AWS Account: $account_id"
    
    echo
    
    # Get Identity Center instances
    echo "üîç Finding Identity Center instances..."
    instances=$(get_identity_center_instances)
    if [ -z "$instances" ]; then
        echo "‚ùå Failed to get Identity Center instances"
        exit 1
    fi
    instance_count=$(echo "$instances" | jq '.Instances | length' 2>/dev/null)
    if [ -z "$instance_count" ] || [ "$instance_count" = "null" ]; then
        echo "‚ùå Failed to parse Identity Center instances"
        exit 1
    fi
    
    if [ "$instance_count" -eq 0 ]; then
        echo "‚ùå No Identity Center instances found."
        exit 1
    fi
    
    echo "‚úÖ Found $instance_count Identity Center instance(s)"
    
    # Get the first (or only) instance
    instance=$(echo "$instances" | jq -r '.Instances[0]')
    instance_arn=$(echo "$instance" | jq -r '.InstanceArn')
    identity_store_id=$(echo "$instance" | jq -r '.IdentityStoreId')
    
    echo "üìç Instance ARN: $instance_arn"
    echo "üìç Identity Store ID: $identity_store_id"
    
    # Extract region from instance ARN
    region=$(extract_region_from_arn "$instance_arn")
    echo "üåç Region: $region"
    
    echo
    
    # Get Amazon Q Developer applications
    echo "üîç Finding Amazon Q Developer applications..."
    applications=$(get_amazon_q_applications "$instance_arn")
    q_app=$(echo "$applications" | jq -r '.Applications[] | select(.ApplicationProviderArn | contains("codewhisperer")) | select(.Name | contains("QDev")) | .Name' 2>/dev/null | head -1)
    
    if [ -z "$q_app" ] || [ "$q_app" = "null" ]; then
        echo "‚ùå No Amazon Q Developer application found."
        echo "üí° Please create a QDevProfile in Identity Center first."
        exit 1
    fi
    
    echo "‚úÖ Found Amazon Q Developer application: $q_app"
    
    # Construct the start URL
    start_url="https://${identity_store_id}.awsapps.com/start"
    echo "üîó Start URL: $start_url"
    
    # Extract instance ID from instance ARN for MFA settings URL
    instance_id=$(echo "$instance_arn" | sed 's/.*instance\///')
    mfa_settings_url="https://${region}.console.aws.amazon.com/singlesignon/home?region=${region}&tab=network-security#/instances/${instance_id}/settings"
    
    echo
    echo "üîí MFA Settings Configuration"
    echo "============================="
    echo "For testing environments, you may want to disable MFA for easier authentication."
    echo "üåê MFA Settings URL: $mfa_settings_url"
    echo
    
    read -p "ü§î Do you want to open MFA settings in browser to configure? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üåê Opening MFA settings in browser..."
        
        # Try different browser commands based on the system
        if command -v xdg-open >/dev/null 2>&1; then
            xdg-open "$mfa_settings_url" 2>/dev/null &
        elif command -v open >/dev/null 2>&1; then
            open "$mfa_settings_url" 2>/dev/null &
        elif command -v start >/dev/null 2>&1; then
            start "$mfa_settings_url" 2>/dev/null &
        else
            echo "‚ùå Unable to open browser automatically."
            echo "üìã Please manually open this URL in your browser:"
            echo "$mfa_settings_url"
        fi
        
        echo
        echo "üìã MFA Configuration Steps:"
        echo "1. Navigate to 'Authentication' section"
        echo "2. Find 'Multi-factor authentication' settings"
        echo "3. Set MFA requirement to 'Never (disabled)' for testing"
        echo "4. Save the configuration"
        echo
        
        read -p "‚úÖ Have you disabled MFA (set to 'Never')? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "‚úÖ MFA configuration confirmed as disabled"
        else
            echo "‚ö†Ô∏è  MFA may still be enabled - authentication might require additional steps"
        fi
    else
        echo "‚ö†Ô∏è  Skipping MFA configuration - you may need to configure MFA settings manually if authentication fails"
        echo "üìã Manual URL: $mfa_settings_url"
    fi
    
    echo
    echo "üöÄ Generated Amazon Q Developer Login Command:"
    echo "=============================================="
    
    # Generate the q login command
    login_command="q login --license pro --identity-provider $start_url --region $region --use-device-flow"
    
    echo "$login_command"
    
    echo
    echo "üìã Command breakdown:"
    echo "  --license pro: Use Amazon Q Developer Pro"
    echo "  --identity-provider: Identity Center start URL"
    echo "  --region: Identity Center region"
    echo "  --use-device-flow: Use device flow for authentication"
    
    echo
    read -p "ü§î Do you want to execute this command now? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üöÄ Executing login command..."
        echo
        eval "$login_command"
    else
        echo "üíæ Command saved. You can copy and run it manually:"
        echo "$login_command"
    fi
}

# Check dependencies
check_dependencies() {
    command -v aws >/dev/null 2>&1 || {
        echo "‚ùå Error: AWS CLI is not installed or not in PATH."
        exit 1
    }
    
    command -v jq >/dev/null 2>&1 || {
        echo "‚ùå Error: jq is not installed. Please install jq to parse JSON."
        exit 1
    }
    
    command -v q >/dev/null 2>&1 || {
        echo "‚ùå Error: Amazon Q CLI is not installed or not in PATH."
        exit 1
    }
}

# Run dependency check
check_dependencies

# Run main function
main